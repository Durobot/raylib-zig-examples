// This is a Zig version of a raylib example from
// https://github.com/raysan5/raylib/
// It is distributed under the same license as the original - unmodified zlib/libpng license
// Header from the original source code follows below:

///*******************************************************************************************
//*
//*   raylib [shapes] example - draw rectangle rounded (with gui options)
//*
//*   Example originally created with raylib 2.5, last time updated with raylib 2.5
//*
//*   Example contributed by Vlad Adrian (@demizdor) and reviewed by Ramon Santamaria (@raysan5)
//*
//*   Example licensed under an unmodified zlib/libpng license, which is an OSI-certified,
//*   BSD-like license that allows static linking with closed source software
//*
//*   Copyright (c) 2018-2023 Vlad Adrian (@demizdor) and Ramon Santamaria (@raysan5)
//*
//********************************************************************************************/


// Download raygui.h from https://github.com/raysan5/raygui/tree/master/src and copy it to this project's folder.
// Build with `zig build-exe main.zig -idirafter ./ -lc -lraylib`

// WARNING: unless this bug in Zig transtale - https://github.com/ziglang/zig/issues/15408 - has been fixed,
// you're going to see this error:

// /home/archie/.cache/zig/o/acc023fd58b4b17daf3bfe1b7f6e6bf2/cimport.zig:7620:27: error: incompatible types: 'c_int' and 'f32'
//                     value += (GetMouseDelta().y / (scrollbar.height - slider.height)) * @intToFloat(f32, valueRange);
//                     ~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// /home/archie/.cache/zig/o/acc023fd58b4b17daf3bfe1b7f6e6bf2/cimport.zig:7620:21: note: type 'c_int' here
//                     value += (GetMouseDelta().y / (scrollbar.height - slider.height)) * @intToFloat(f32, valueRange);
//                     ^~~~~
// /home/archie/.cache/zig/o/acc023fd58b4b17daf3bfe1b7f6e6bf2/cimport.zig:7620:87: note: type 'f32' here
//                     value += (GetMouseDelta().y / (scrollbar.height - slider.height)) * @intToFloat(f32, valueRange);
//                              ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

// Zig incorrectly skips type coercion when translating certain C code in raygui.h.
// As a workaround edit the line in cimport.zig mentioned in the error message, manually adding necessary type coercion:
// value += @floatToInt(c_int, (GetMouseDelta().y / (scrollbar.height - slider.height)) * @intToFloat(f32, valueRange));
//
// Also correct the line below it:
// value += (GetMouseDelta().x / (scrollbar.width - slider.width)) * @intToFloat(f32, valueRange);
// Add similar type coercion:
// value += @floatToInt(c_int, (GetMouseDelta().x / (scrollbar.width - slider.width)) * @intToFloat(f32, valueRange));
//
// Yet another, similar code snippet was added in recent versions of raygui.h, leading to more of the same error,
// apply the same modification to each line where it is needed.
//
// Save cimport.zig and build the project again, it should compile without errors.

// You may need to do this again, if cimport.zig is regenerated by Zig :(

const c = @cImport(
{
    @cInclude("raylib.h");
    @cDefine("RAYGUI_IMPLEMENTATION", {});
    @cInclude("raygui.h"); // Required for GUI controls
});

pub fn main() void
{
    const screen_width = 800;
    const screen_height = 450;

    c.InitWindow(screen_width, screen_height, "raylib [shapes] example - draw rectangle rounded");
    defer c.CloseWindow(); // Close window and OpenGL context

    var roundness: f32 = 0.2;
    var width: i32 = 200;
    var height: i32 = 100;
    var segments: i32 = 0;
    var line_thick: i32 = 1;

    var draw_rect = false;
    var draw_rounded_rect = true;
    var draw_rounded_lines = false;

    c.SetTargetFPS(60);

    while (!c.WindowShouldClose()) // Detect window close button or ESC key
    {
        // Update
        //----------------------------------------------------------------------------------
        const rec = c.Rectangle{ .x = @intToFloat(f32, c.GetScreenWidth() - width - 250) / 2.0,
                                 .y = @intToFloat(f32, c.GetScreenHeight() - height) / 2.0,
                                 .width = @intToFloat(f32, width),
                                 .height = @intToFloat(f32, height) };
        //----------------------------------------------------------------------------------

        // Draw
        //---------------------------------------------------------------------------------
        c.BeginDrawing();
        defer c.EndDrawing();

        c.ClearBackground(c.RAYWHITE);

        c.DrawLine(560, 0, 560, c.GetScreenHeight(), c.Fade(c.LIGHTGRAY, 0.6));
        c.DrawRectangle(560, 0, c.GetScreenWidth() - 500, c.GetScreenHeight(), c.Fade(c.LIGHTGRAY, 0.3));

        if (draw_rect) c.DrawRectangleRec(rec, c.Fade(c.GOLD, 0.6));
        if (draw_rounded_rect) c.DrawRectangleRounded(rec, roundness, segments, c.Fade(c.MAROON, 0.2));
        if (draw_rounded_lines) c.DrawRectangleRoundedLines(rec,roundness, segments, @intToFloat(f32, line_thick), c.Fade(c.MAROON, 0.4));

        // Draw GUI controls
        //------------------------------------------------------------------------------
        width = @floatToInt(i32, c.GuiSliderBar(.{ .x = 640.0, .y = 40.0, .width = 105.0, .height = 20.0 }, "Width", null,
                                                @intToFloat(f32, width), 0.0, @intToFloat(f32, c.GetScreenWidth()) - 300.0));
        height = @floatToInt(i32, c.GuiSliderBar(.{ .x = 640.0, .y = 70.0, .width = 105.0, .height = 20.0 }, "Height", null,
                                                 @intToFloat(f32, height), 0.0, @intToFloat(f32, c.GetScreenHeight()) - 50.0));
        roundness = c.GuiSliderBar(.{ .x = 640.0, .y = 140.0, .width = 105.0, .height = 20.0 }, "Roundness", null, roundness, 0.0, 1.0);
        line_thick = @floatToInt(i32, c.GuiSliderBar(.{ .x = 640.0, .y = 170.0, .width = 105.0, .height = 20.0 }, "Thickness", null,
                                                    @intToFloat(f32, line_thick), 0.0, 20.0));
        segments = @floatToInt(i32, c.GuiSliderBar(.{ .x = 640.0, .y = 240.0, .width = 105.0, .height = 20.0 }, "Segments", null,
                                                   @intToFloat(f32, segments), 0.0, 60.0));

        draw_rounded_rect = c.GuiCheckBox(.{ .x = 640.0, .y = 320.0, .width = 20.0, .height = 20.0 }, "DrawRoundedRect",
                                          draw_rounded_rect);
        draw_rounded_lines = c.GuiCheckBox(.{ .x = 640.0, .y = 350.0, .width = 20.0, .height = 20.0 }, "DrawRoundedLines",
                                           draw_rounded_lines);
        draw_rect = c.GuiCheckBox(.{ .x = 640.0, .y = 380.0, .width = 20.0, .height = 20.0 }, "DrawRect", draw_rect);
        //------------------------------------------------------------------------------

        c.DrawText(c.TextFormat("MODE: %s", @ptrCast([*c]const u8, if (segments >= 4) "MANUAL" else "AUTO")), 640, 280, 10,
                   if (segments >= 4) c.MAROON else c.DARKGRAY);

        c.DrawFPS(10, 10);
        //---------------------------------------------------------------------------------
    }
}
